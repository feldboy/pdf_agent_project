#!/usr/bin/env python3
"""
Legal Case Processing System Demo (No API Required)

This demo shows the system structure and capabilities without requiring API keys.
"""

import os
import sys
from datetime import datetime
from legal_case_processor import CaseData, LocationAnalysis, AttorneyVerification

def demo_case_data_extraction():
    """Demo case data extraction with sample data"""
    print("üîç Legal Case Data Extraction Demo")
    print("=" * 50)
    
    # Sample extracted case data (as if extracted by AI)
    case_data = CaseData(
        client_name="Jane Doe",
        date_of_loss="May 3, 2024",
        accident_type="Auto Accident - Rear-end collision",
        injuries=[
            "Cervical strain (neck)",
            "Lumbar strain (lower back)",
            "Possible herniated disc at C5-C6"
        ],
        treatment=[
            "Physical therapy (3x per week for 6 weeks)",
            "MRI of cervical and lumbar spine",
            "Orthopedic consultation",
            "Pain management as needed"
        ],
        medical_providers=[
            "Dr. Michael Smith, MD - LA Orthopedics",
            "Jane Doe Physical Therapy Center"
        ],
        insurance_info="GEICO Insurance",
        policy_limits="Not disclosed",
        liability_info="Defendant cited for following too closely (V.C. 21703)",
        attorney_name="Sarah Levine",
        attorney_email="sarah@levinelaw.com",
        law_firm="Levine & Associates",
        accident_location="Sunset Blvd & Vine St, Los Angeles, CA"
    )
    
    print("üìÑ Extracted Case Information:")
    print(f"   Client: {case_data.client_name}")
    print(f"   Date of Loss: {case_data.date_of_loss}")
    print(f"   Accident Type: {case_data.accident_type}")
    print(f"   Location: {case_data.accident_location}")
    print(f"   Injuries: {len(case_data.injuries)} identified")
    for injury in case_data.injuries:
        print(f"     ‚Ä¢ {injury}")
    print(f"   Attorney: {case_data.attorney_name} ({case_data.attorney_email})")
    print(f"   Law Firm: {case_data.law_firm}")
    
    return case_data

def demo_missing_information_analysis(case_data):
    """Demo missing information analysis"""
    print("\n‚ùó Missing Information Analysis Demo")
    print("=" * 50)
    
    # Sample missing information (as if identified by AI)
    missing_info = [
        "‚Ä¢ What are the defendant's insurance policy limits?",
        "‚Ä¢ Have there been any prior injuries or claims for this client?", 
        "‚Ä¢ What is the exact treatment timeline and duration?",
        "‚Ä¢ Was the recommended surgery actually performed?",
        "‚Ä¢ Are there any witness statements available?",
        "‚Ä¢ What is the client's employment status and wage loss?",
        "‚Ä¢ Has an IME (Independent Medical Exam) been requested?",
        "‚Ä¢ Are there any comparative negligence factors?"
    ]
    
    print("üîç Critical Information Gaps Identified:")
    for item in missing_info:
        print(f"   {item}")
    
    print(f"\nüìä Analysis: {len(missing_info)} follow-up items identified")
    print("   Priority: HIGH - Policy limits and wage loss information critical")
    
    return missing_info

def demo_location_risk_analysis(location):
    """Demo location risk analysis"""
    print("\nüåç Location Risk Analysis Demo")
    print("=" * 50)
    
    # Sample location analysis (as if generated by AI)
    location_analysis = LocationAnalysis(
        city="Los Angeles",
        county="Los Angeles County", 
        state="CA",
        political_leaning="Liberal",
        tort_environment="Tort-Friendly",
        risk_level="High",
        notes="""
        Los Angeles is known for being a plaintiff-friendly jurisdiction with:
        ‚Ä¢ Historically liberal-leaning juries
        ‚Ä¢ Higher average jury verdicts compared to other CA counties
        ‚Ä¢ Strong consumer protection culture
        ‚Ä¢ Active personal injury bar
        ‚Ä¢ Judges generally allow broad discovery
        
        Recent trends show average auto accident verdicts 40% higher than 
        state average. Expect aggressive litigation approach from plaintiff 
        attorneys in this jurisdiction.
        """
    )
    
    print(f"üìç Location: {location_analysis.city}, {location_analysis.county}, {location_analysis.state}")
    print(f"üó≥Ô∏è  Political Leaning: {location_analysis.political_leaning}")
    print(f"‚öñÔ∏è  Tort Environment: {location_analysis.tort_environment}")
    print(f"üéØ Risk Level: {location_analysis.risk_level}")
    print(f"üìù Analysis Notes:")
    print(location_analysis.notes)
    
    return location_analysis

def demo_attorney_verification(attorney_name, attorney_email):
    """Demo attorney verification"""
    print("\n‚öñÔ∏è Attorney Verification Demo")
    print("=" * 50)
    
    # Sample attorney verification (as if performed by AI)
    attorney_verification = AttorneyVerification(
        name=attorney_name,
        bar_status="Likely Active - Professional Email Domain",
        license_number="Unknown - Requires State Bar Lookup",
        state="CA",
        email_verified=True,
        firm_verified=True,
        notes="""
        Attorney Analysis:
        ‚Ä¢ Professional email domain (@levinelaw.com) suggests legitimate practice
        ‚Ä¢ Domain registration shows established law firm (5+ years)
        ‚Ä¢ Firm name format consistent with personal injury practice
        ‚Ä¢ Email structure follows professional standards
        
        Recommendations:
        ‚Ä¢ Verify active California State Bar license
        ‚Ä¢ Check for any disciplinary actions
        ‚Ä¢ Confirm malpractice insurance coverage
        ‚Ä¢ Review firm's case history and experience level
        """
    )
    
    print(f"üë®‚Äç‚öñÔ∏è Attorney: {attorney_verification.name}")
    print(f"üìß Email Domain: {'‚úÖ Professional' if attorney_verification.email_verified else '‚ùå Generic'}")
    print(f"üè¢ Firm Domain: {'‚úÖ Verified' if attorney_verification.firm_verified else '‚ùå Unverified'}")
    print(f"üìú Bar Status: {attorney_verification.bar_status}")
    print(f"üåé State: {attorney_verification.state}")
    print(f"üìù Verification Notes:")
    print(attorney_verification.notes)
    
    return attorney_verification

def demo_comprehensive_report(case_data, missing_info, location_analysis, attorney_verification):
    """Demo comprehensive report generation"""
    print("\nüìÑ Comprehensive Case Report Demo")
    print("=" * 80)
    
    # Generate comprehensive report (simulated output)
    report = f"""
# Case Summary: {case_data.client_name} | {case_data.accident_type} | {location_analysis.city}, {location_analysis.state}

Hi Ron,

Here's a comprehensive analysis of the forwarded case email:

## üìÑ Case Summary (Extracted from Attachments)

**Claimant:** {case_data.client_name}
**Date of Loss:** {case_data.date_of_loss}
**Accident Type:** {case_data.accident_type}
**Location:** {case_data.accident_location}

### Injuries & Treatment
{chr(10).join([f"‚Ä¢ {injury}" for injury in case_data.injuries])}

### Medical Treatment
{chr(10).join([f"‚Ä¢ {treatment}" for treatment in case_data.treatment])}

### Medical Providers
{chr(10).join([f"‚Ä¢ {provider}" for provider in case_data.medical_providers])}

### Insurance Information
**Insurance Company:** {case_data.insurance_info}
**Policy Limits:** {case_data.policy_limits}

### Liability Information
{case_data.liability_info}

## ‚ùó Missing Info / Follow-Ups Needed

{chr(10).join(missing_info)}

## üåç Location Risk Analysis

**Accident Location:** {location_analysis.city}, {location_analysis.state}
**Political Leaning:** {location_analysis.political_leaning}
**Tort Environment:** {location_analysis.tort_environment}
**Risk Level:** {location_analysis.risk_level}

**Analysis Summary:**
Los Angeles presents a HIGH RISK jurisdiction for defendants. Expect plaintiff-friendly 
juries and above-average settlement demands. Recommend early settlement discussions.

## ‚öñÔ∏è Attorney License Verification

**Name:** {attorney_verification.name}
**Estimated Bar Status:** {attorney_verification.bar_status}
**Email Domain:** {'Professional' if attorney_verification.email_verified else 'Generic'}
**Firm Verification:** {'‚úÖ Professional Domain' if attorney_verification.firm_verified else '‚ö†Ô∏è  Generic Email Domain'}

**Verification Summary:**
Attorney appears legitimate with professional email domain. Recommend confirming 
active bar status and malpractice coverage.

## üìä Case Assessment Summary

**Documentation Quality:** Good - Most key information present
**Location Risk:** HIGH - Tort-friendly jurisdiction
**Attorney Credibility:** LIKELY LEGITIMATE - Professional presentation
**Estimated Case Value:** $25,000 - $75,000 (pending policy limits and wage loss info)

**Priority Actions:**
1. Obtain defendant's policy limits immediately
2. Verify client's employment and wage loss
3. Confirm extent of recommended vs. performed treatment
4. Consider early mediation given high-risk jurisdiction

**Settlement Strategy:**
Given Los Angeles venue and injury profile, recommend proactive settlement 
approach. Case likely to settle in $40,000-$60,000 range if liability clear 
and treatment reasonable.

---
*Report generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
*Original Email: Auto Accident Case - Jane Doe from sarah@levinelaw.com*
    """
    
    print(report)
    
    # Save report to file
    with open("demo_comprehensive_report.txt", "w") as f:
        f.write(report)
    
    print("=" * 80)
    print("üìÑ Report saved to: demo_comprehensive_report.txt")
    
    return report

def main():
    """Main demo function"""
    print("üé≠ Legal Case Processing System - Complete Demo")
    print("=" * 80)
    print("This demo shows how the system processes legal case emails")
    print("without requiring API keys or actual email connections.\n")
    
    # Step 1: Case Data Extraction
    case_data = demo_case_data_extraction()
    
    # Step 2: Missing Information Analysis
    missing_info = demo_missing_information_analysis(case_data)
    
    # Step 3: Location Risk Analysis
    location_analysis = demo_location_risk_analysis(case_data.accident_location)
    
    # Step 4: Attorney Verification
    attorney_verification = demo_attorney_verification(
        case_data.attorney_name, 
        case_data.attorney_email
    )
    
    # Step 5: Comprehensive Report
    report = demo_comprehensive_report(
        case_data, missing_info, location_analysis, attorney_verification
    )
    
    print("\nüéâ Demo Complete!")
    print("\nThis demonstrates the full pipeline:")
    print("üì¨ Email Processing ‚Üí üß† AI Analysis ‚Üí üåç Risk Assessment ‚Üí üìÑ Report Generation")
    print("\nTo use with real emails:")
    print("1. Set up your .env file with email and API credentials")
    print("2. Run: python legal_case_system.py --mode monitor")
    print("3. Forward legal case emails to your monitored inbox")
    print("4. Receive comprehensive analysis reports automatically!")

if __name__ == "__main__":
    main()
